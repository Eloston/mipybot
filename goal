MiPyBot goals
-------------

To-Do soon:
-Daemonize threads (?)
-Use queue module to reduce race conditions

A better system:
-Do not make an interface to packets flexible. All interfaces should be directed to higher level classes.
-Packet classes will read the data and directly interface with the hither level classes to store the data
-Higher level classes:
    -Block class:
        -Acts sort of like a database to store block information, but has interfaces to interact with blocks
        -Contains data for every block by block id, type (transparent, solid, etc), x, y, z, chunck (identified by position as well), and more
        -When accessing a block directly, create a new class with the properties defined in the database for that block
            -Interfaces in here will be wrappers around commands to the database
        -A separate thread to parse chunck data from server and insert it into database(?)
        -Send signals every block and chunck update from the server(?)

    -Chat class:
        -Stores a database of the chat sent from the server
        -Has interface to send a chat message
        -Sends signal every new chat message(?)

    -Player status class:
        -Contains health information, position information, stance information, and other misc. player stats
        -Interfaces to read and modify them
        -Send signal on health update(?)
        -Send signal on position update from server(?)

    -Slot interface:
        -Acessing a slot will be much like accessing a block
        -Slots will be stored by window id (unless it's the Hotbar or Inventory Window, which will be 'hotbar' and 'invwin')
            -The cursor will be a special window named 'cursor'
        -Acessing a window will also behave much like acessing a block
            -Contains information about which slots are in them, and create and return a class when a single slot is created

Near future:
-Read configuration file
    -Merge constants.py into config
    -Multiple configurations created by user
-GUI
    -Release v0.1 when at this stage(???)
-Text-based interface
    -GNU Screen like behavior?
    -Use domain sockets when avaliable and TCP otherwise
-Improved Plugin Management(?)
-Read more data from packets
-Friendly API for plugins
